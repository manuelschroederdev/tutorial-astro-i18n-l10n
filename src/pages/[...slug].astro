---
import { useStoryblokApi } from '@storyblok/astro';
import StoryblokComponent from '@storyblok/astro/StoryblokComponent.astro';
import Layout from '../layouts/Layout.astro';
import { getLanguageCodes } from '../utils/i18n';
import { getStoryblokPaths } from '../utils/paths';

export async function getStaticPaths() {
	const languages = await getLanguageCodes();

	const staticPaths = await getStoryblokPaths('us', languages);
	console.log('staticPaths US', staticPaths);
	return staticPaths;
}

console.log('Astro.params.slug', Astro.params.slug);
const slug = Astro.params.slug?.split('/') ?? [];
console.log('slug', slug);

const languages = await getLanguageCodes();
const language = languages.includes(slug[0]) ? slug[0] : undefined;

if (language) {
	slug.shift();
}

// add some logic here to prepend 'us/' to the slug if it doesn't start with 'us'
// This is necessary to ensure that the Storyblok API can resolve the story correctly.
// getStaticPaths generates paths that start with 'us', but our logic in the preview environment is different.
// slug.length is checked to avoid adding 'us/' when the slug is empty, equaling the home story.
/* if (slug.length && !slug[0].startsWith('us')) {
	slug.unshift('us');
}
 */
const storyblokApi = useStoryblokApi();
const { data } = await storyblokApi.get(
	`cdn/stories/us/${slug && slug.length > 0 ? slug.join('/') : 'home'}`,
	{
		version: 'draft',
		resolve_links: 'story',
		language,
	},
);

const story = data.story;
---

<Layout currentLanguage={language} story={story}>
	<StoryblokComponent currentLanguage={language} blok={story.content} />
</Layout>
